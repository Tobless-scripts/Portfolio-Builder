import Header from "./Header";
import Footer from "./Footer";
import "../styles/Brief.css";
function Brief() {
    return (
        <>
            <Header />
            <Text />
            <Random />
            <Briefs />
            <Footer />
        </>
    );
}
function Text() {
    function slideIn() {
        document.querySelector(".generateRandom").classList.add("visible");
        document.querySelector(".randomContainer").style.display = "block";
    }
    return (
        <div className="briefText">
            <h2>
                Generate your random <span>graphic design</span> brief
            </h2>
            <button className="generate" onClick={slideIn}>
                GENERATE BRIEF
            </button>
        </div>
    );
}
function Random() {
    function copy() {
        var textToCopy = document.querySelector(".textToCopy").innerHTML;
        navigator.clipboard
            .writeText(textToCopy)
            .then(() => {
                alert("Brief copied to clipboard!");
            })
            .catch((error) => {
                alert("Failed to copy text: " + error);
            });
    }

    return (
        <div className="randomContainer">
            <div className="generateRandom">
                <div className="intro">
                    <div className="name">
                        <h2>Name:</h2>
                        <p>John Doe</p>
                    </div>
                    <div className="topic">
                        <h2>BRIEF</h2>
                        <p>Wedding Flyer</p>
                    </div>
                </div>
                <div className="actualBrief">
                    <h2>Brief:</h2>
                    <p className="textToCopy">
                        Design an infographic that visually explains the
                        Observer Pattern in JavaScript for beginner and
                        intermediate developers. The design should feature a
                        central `Observer` class with sections illustrating the
                        `subscribe`, `execute`, and `unsubscribe` methods. Use
                        vibrant, professional colors to distinguish events and
                        functions, with arrows or flow diagrams connecting
                        processes to demonstrate the workflow. Include short
                        code snippets and icons for clarity, ensuring the
                        infographic is clean, modern, and easy to understand.
                        Deliver the design in PNG and SVG formats, optimized for
                        use in blogs, learning platforms, or presentations.
                        Driven by a passion for creativity and innovation, this
                        project aims to deliver a seamless user experience while
                        pushing the boundaries of design and functionality. With
                        a focus on clarity, engagement, and usability, the goal
                        is to create a platform that stands out in its
                        simplicity and effectiveness. This initiative is not
                        only about creating a product but about crafting an
                        experience that resonates with users and keeps them
                        coming back.
                    </p>
                    <div className="copyButton">
                        <button id="copyButton" onClick={copy}>
                            Copy Brief to clipboard
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}
function Briefs() {
    return (
        <div className="briefs">
            <First />;
            <Container />
        </div>
    );
}
function First() {
    return (
        <div className="first">
            <h2>Briefs recently generated by others</h2>
            <button>SEE ALL BRIEFS</button>
        </div>
    );
}
function Container() {
    const contentArray = new Array(30).fill(null);

    return (
        <div className="briefContainer">
            {contentArray.map((_, index) => (
                <Content key={index} />
            ))}
        </div>
    );
}
function Content() {
    function fullView(event) {
        // Find all briefContent elements
        const allContent = document.querySelectorAll(".briefContent");

        // Close all open content by hiding the hiddenText and showing the "VIEW IN FULL" button
        allContent.forEach((content) => {
            const revealText = content.querySelector(".hiddenText");
            const viewInFullText = content.querySelector(".seeFull p");

            // Hide the reveal text and show the "VIEW IN FULL" button for all content
            if (revealText) {
                revealText.classList.remove("reveal");
            }
            if (viewInFullText) {
                viewInFullText.style.display = "block";
            }

            // Remove the "removeBefore" class if it was added
            content.classList.remove("removeBefore");
        });

        // Find the parent container of the clicked element
        const parentContent = event.target.closest(".briefContent");

        // Show the hidden text and hide the "VIEW IN FULL" button for the clicked content
        const revealText = parentContent.querySelector(".hiddenText");
        const viewInFullText = parentContent.querySelector(".seeFull p");

        if (revealText) {
            revealText.classList.add("reveal");
        }
        if (viewInFullText) {
            viewInFullText.style.display = "none";
        }

        // Add the class to remove the "before" part for the clicked content
        parentContent.classList.add("removeBefore");
    }

    return (
        <div className="briefContent">
            <div className="seeFull">
                <p onClick={fullView}>VIEW IN FULL</p>
            </div>
            <h2>Name</h2>
            <p className="ptag">
                Design an infographic that visually explains the Observer
                Pattern in JavaScript for beginner and intermediate developers.
                The design should feature a central `Observer` class with
                sections illustrating the `subscribe`, `execute`, and
                `unsubscribe` methods.
                <span>
                    Use vibrant, professional colors to distinguish events and
                    functions, with arrows or flow diagrams connecting processes
                    to demonstrate the workflow. Include short code snippets and
                    icons for clarity, ensuring the infographic is clean,
                    modern, and easy to understand. Deliver the design in PNG
                    and SVG formats, optimized for use in blogs, learning
                    platforms, or presentations.
                </span>
                <p className="hiddenText">
                    Driven by a passion for creativity and innovation, this
                    project aims to deliver a seamless user experience while
                    pushing the boundaries of design and functionality. With a
                    focus on clarity, engagement, and usability, the goal is to
                    create a platform that stands out in its simplicity and
                    effectiveness. This initiative is not only about creating a
                    product but about crafting an experience that resonates with
                    users and keeps them coming back.
                </p>
            </p>
        </div>
    );
}

export default Brief;
